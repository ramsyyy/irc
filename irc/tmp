int    Server::cap(Command cmd, User *user) {
    if (!(cmd.getParameters()[0].compare("LS")))
	{
		std::string response = "CAP * LS :multi-prefix\r\n";
		send(user->getFd(), response.c_str(), response.length(), 0);
		////std::cout<<"response : "<<response<<std::endl;
	}
	else if (!(cmd.getParameters()[0].compare("REQ")))
	{
		std::string response = "CAP * ACK multi-prefix\r\n";
		send(user->getFd(), response.c_str(), response.length(), 0);
		//std::cout<<"response : "<<response<<std::endl;
    }
	else if (!(cmd.getParameters()[0].compare("END")))
	{
			std::string response = ":localhost:"+_portNum+" 001 "+(user->getNickname())+": Bienvenue sur Chat Irc\r\n";
			send(user->getFd(), response.c_str(), response.length(), 0);
			response = ":localhost:"+_portNum+" 002 : Your host is localhost, running version 1.\r\n";
			send(user->getFd(), response.c_str(), response.length(), 0);
			response = ":localhost:"+_portNum+" 003 : This server was created 01/01/2023.\r\n";
			send(user->getFd(), response.c_str(), response.length(), 0);
			response = ":localhost:"+_portNum+" 004 "+user->getNickname()+"\r\n";
			send(user->getFd(), response.c_str(), response.length(), 0);
	}
	return 1;
}

int    Server::pass(Command cmd, User *user) {
    if ((cmd.getParameters()[0].compare(_password)))
	{
		std::string response = "PASS rejected\r\n";
		send(user->getFd(), response.c_str(), response.length(), 0);
		epoll_ctl(rc, EPOLL_CTL_DEL, user->getFd(), &event);
		close(user->getFd());
		delete user;
		return 0;
	}
	else{
		//std::cout << _tmp_fds[user->getFd()];
		_tmp_fds[user->getFd()] = true;
	}
	return -1;

}

int    Server:: user(Command cmd, User *user) {
    user->setUsername(user->getNickname());
	user->setFullname(cmd.getFName());
	return 0;
}

int    Server::nick(Command cmd, User *user) {
    if (!_tmp_fds[user->getFd()])
	{
		std::string response = "PASS NEEDED\r\n";
		send(user->getFd(), response.c_str(), response.length(), 0);
		epoll_ctl(rc, EPOLL_CTL_DEL, user->getFd(), &event);
		close(user->getFd());
		return -1;
	}
	//On check si le nickname est deja utilise
	_tmp_fds[user->getFd()] = false;
	std::string tmp = cmd.getParameters()[0];
	while (_users.find(tmp) != _users.end())
		tmp.insert(0,"_");
	user->setNickname(tmp);
	return 0;
}

int    Server::privMsg(Command cmd, User *user) {
	std::string response;
    if (cmd.getParameters().size() > 1 && cmd.getParameters()[0][0] == '#')//msg to channel
		sendToChan(cmd, user);
	else if (cmd.getParameters().size() > 1 && cmd.getParameters()[0][0] != '#') //msg to user
	{
		if (_users.find(cmd.getParameters()[0]) != _users.end())
		{
			response = ":"+user->getNickname()+" "+cmd.getParameters()[0]+' '+cmd.getMsg()+"\r\n";
			display(response, (_users.find(cmd.getParameters()[0])->second));
			display(response, user);
			//std::cout<<"response =>"<<response<<std::endl;
		}
		else
		{
			response = ":localhost 401 "+user->getNickname()+" :No such Nickname\r\n";
			send((_users.find(cmd.getParameters()[0])->second)->getFd(), response.c_str(), response.length(), 0);
			//std::cout<<"response =>"<<response<<std::endl;
		}
	}
	return 0;
}


int    Server::notice(Command cmd, User *user) {
	std::string response;
    if (cmd.getParameters().size() > 1 && cmd.getParameters()[0][0] == '#')//msg to channel
    	sendToChan(cmd, user);
    else if (cmd.getParameters().size() > 1 && cmd.getParameters()[0][0] != '#') //msg to user
    {
    	if (_users.find(cmd.getParameters()[0]) != _users.end())
    	{
    		response = ":"+user->getNickname()+" "+cmd.getParameters()[0]+' '+cmd.getMsg()+"\r\n";
    		display(response, (_users.find(cmd.getParameters()[0])->second));
    		//display(response, user);
    		//std::cout<<"response =>"<<response<<std::endl;
    	}
    }
	return 0;
}

int    Server::ping(Command cmd, User *user) {
	std::string response;
    user->setPing(std::time(0));
	response = "PONG localhost:"+_portNum+"\r\n";
	send(user->getFd(), response.c_str(), response.length(), 0);
	return 0;
}

int    Server::pong(command cmd, User *user) {
	
    user->setPong(std::time(0));
	return 0;
}

int    Server::whois(Command cmd, User *user) {
	std::string response;
    response = ":localhost 311 "+cmd.getParameters()[0]+' '+user->getNickname()+' '+user->getNickname()+" localhost * "+user->getFullname()+"\r\n";
	send(user->getFd(), response.c_str(), response.length(), 0);
	return 0;
}

int  Server::part(Command cmd, User *user) {
    std::string channel = cmd.getParameters()[0].c_str() + 1;
	std::map<std::string, Channel *>::iterator it = channels.find(channel);
	if (it != channels.end() && channels[channel]) {
		std::cout << "The user " << user->getNickname() << " quits the channel " << channel << "\r\n";
		user->setChannel("");
		sendToChan(cmd, user);
		channels[channel]->delUser(user);
		if (channels[channel]->getUser().size() < 1)
		{
			delete channels[channel];
			channels.erase(channel);
		}
	}
	return 0;
}

int    Server::quit(Command cmd, User *user, struct epoll_event event, int rc, int *num_event) {
    std::cout << "Connection closed by "<<user->getNickname() <<'\n';
	epoll_ctl(rc, EPOLL_CTL_DEL, user->getFd(), &event);
	_users.erase(user->getNickname());
	close(event.data.fd);
	(*num_event)--;
	delete user;
	return 0;
}


int    Server:: join(Command cmd, User *user) {
    std::string channel = cmd.getParameters()[0].c_str() + 1;
	std::cout << "The user " << user->getNickname() << " joins the channel " << channel << "\r\n";
	std::map<std::string, Channel *>::iterator it = channels.find(channel);
	if (it == channels.end()) 
	{ //channel not exist
		channels.insert(std::pair<std::string, Channel *>(channel, new Channel(this, channel)));
		channels[channel]->addUser(user);
		user->setChannel(channel);
	}
	else 
	{ //the channel already exists
		channels[channel]->addUser(user);
		user->setChannel(channel);
	}
	sendToChan(cmd, user);
	return 0;
}

int    Server:: oper(Command cmd, User *user) 
{
	if (cmd.getNbParameters() < 2)
	{
		reply(-1, ERR_NEEDMOREPARAMS, user, &cmd, *this, NULL);
		return 0;
	}
	std::string pwd = cmd.getParameters()[1];
	std::string name = cmd.getParameters()[0];
	// name.erase(std::remove(name.begin(), name.end(), '\n'), name.end());
	name.erase(std::remove(name.begin(), name.end(), ':'), name.end());
	std::map<std::string , User * >::iterator it = _users.find(name);
	User *other = NULL
	if (it != _users.end())
		other = it->second;
	else
	{
		reply(-1, ERR_NOSUCHNICK, user, &cmd, *this, NULL);
		return 0;
	}
	if (pwd.compare(IRCOpwd) != 0)
	{
		reply(-1, ERR_PASSWDMISMATCH, user, &cmd, *this, NULL);
		return 0;
	}
	if (pwd.compare(IRCOpwd) == 0)
	{
		other->setMode("IRCOP", true);
		display("MODE " + other->getNickname() + " +o", user);
		reply(RPL_YOUREOPER, -1, other, &cmd, *this, NULL);
	}
	return 0;
}


int    Server:: mode(Command cmd, User *user)
{
	std::string name = cmd.getParameters()[0];
	std::string channel = "";
	std::string mode = "";
	std::string who = "";
	Channel		*chan = NULL;
	User		*other = NULL;
	
	if (cmd.getNbParameters() < 1) // mandatory check
	{
		reply(-1, ERR_NEEDMOREPARAMS, user, &cmd, *this, NULL);
		return 0;
	}
	else if (cmd.getNbParameters() > 1)
		mode = cmd.getParameters()[1];
	name.erase(std::remove(name.begin(), name.end(), '\n'), name.end());
	name.erase(std::remove(name.begin(), name.end(), '\r'), name.end());
	name.erase(std::remove(name.begin(), name.end(), ':'), name.end());
	
	if (name[0] == '#') // check if channel mode
	{
		channel = name.erase(0, 1);
		std::map<std::string, Channel *>::iterator it = channels.find(channel);
		if (it != channels.end())
			chan = it->second;
		else
		{
			reply(-1, ERR_NOSUCHCHANNEL, user, &cmd, *this, NULL);
			return 0;
		}
		if (cmd.getNbParameters() > 1)
			mode = cmd.getParameters()[1];
		else
		{
			// std::cout << cmd
			reply(RPL_CHANNELMODEIS, -1, user, &cmd, *this, chan);
			return 0;
        }
// setperator channel mode				
		if (mode.find("+o") != std::string::npos || mode.find("-o") != std::string::npos)
		{
			if (cmd.getNbParameters() > 2)
				who = cmd.getParameters()[2];
			else
				return 0;
			if (mode.find("+") != std::string::npos)
			{
				std::map<std::string , User * >::iterator itt = _users.find(who);
				if (itt != _users.end())
					other = itt->second;
				else
					return 0;
				if (user->getIRCOp() == true || user->get_op_chan() == true)
				{
					chan->addOpChan(other);
					display(":" + user->getNickname() + " MODE " + cmd.getParameters()[0] + " " + mode, other);
					display(":" + user->getNickname() + " MODE " + cmd.getParameters()[0] + " " + mode, user);
					return 0;
				}
				else
				{
					reply(-1, ERR_CHANOPRIVISNEEDED, user, &cmd, *this, chan);
					return 0;
				}
			}
			else
			{
				std::map<std::string , User * >::iterator itt = _users.find(who);
				if (itt != _users.end())
					other = itt->second;
				else
					return 0;
				if (user->getIRCOp() == true || user->get_op_chan() == true)
				{
					chan->removeOpChan(other);
					std::cout << cmd.getParameters()[0] << std::endl;
					display(":" + user->getNickname() + " MODE " + cmd.getParameters()[0] + " " + mode, other);
					display(":" + user->getNickname() + " MODE " + cmd.getParameters()[0] + " " + mode, user);
					return 0;
				}
				else
				{
					reply(-1, ERR_CHANOPRIVISNEEDED, user, &cmd, *this, chan);
					return 0;
				}
			}
        }
		if (mode.find("+m") != std::string::npos || mode.find("-m") != std::string::npos)
		{
			if (mode.find("+") != std::string::npos)
			{
				if (user->getIRCOp() == true || user->get_op_chan() == true)
				{
					chan->addMChan();
					display(":" + user->getNickname() + " MODE " + cmd.getParameters()[0] + " " + mode, user);
					return 0;
				}
				else
				{
					reply(-1, ERR_CHANOPRIVISNEEDED, user, &cmd, *this, chan);
					return 0;
				}
			}
			else
			{
				if (user->getIRCOp() == true || user->get_op_chan() == true)
				{
					chan->removeMChan();
					display(":" + user->getNickname() + " MODE " + cmd.getParameters()[0] + " " + mode, user);
					return 0;
				}
				else
				{
					reply(-1, ERR_CHANOPRIVISNEEDED, user, &cmd, *this, chan);
					return 0;
				}
			}
        }
		if (mode.find("+v") != std::string::npos || mode.find("-v") != std::string::npos)
		{
			if (cmd.getNbParameters() > 2)
				who = cmd.getParameters()[2];
			else
				return 0;
			if (mode.find("+") != std::string::npos)
			{
				std::map<std::string , User * >::iterator itt = _users.find(who);
				if (itt != _users.end())
					other = itt->second;
				else
					return 0;
				if (user->getIRCOp() == true || user->get_op_chan() == true)
				{
					chan->addVChan(other);
					display(":" + user->getNickname() + " MODE " + cmd.getParameters()[0] + " " + mode, other);
					display(":" + user->getNickname() + " MODE " + cmd.getParameters()[0] + " " + mode, user);
					return 0;
				}
				else
				{
					reply(-1, ERR_CHANOPRIVISNEEDED, user, &cmd, *this, chan);
					return 0;
				}
			}
			else
			{
				std::map<std::string , User * >::iterator itt = _users.find(who);
				if (itt != _users.end())
					other = itt->second;
				else
					return 0;
				if (user->getIRCOp() == true || user->get_op_chan() == true)
				{
					chan->removeVChan(other);
					display(":" + user->getNickname() + " MODE " + cmd.getParameters()[0] + " " + mode, other);
					display(":" + user->getNickname() + " MODE " + cmd.getParameters()[0] + " " + mode, user);
					return 0;
				}
				else
				{
					reply(-1, ERR_CHANOPRIVISNEEDED, user, &cmd, *this, chan);
					return 0;
				}
			}
		}
		
	}
	if (cmd.getNbParameters() == 1 && name.compare(user->getNickname()) == 0)
	{
		std::cout << user->getMode() << std::endl;
		reply(RPL_UMODEIS, -1, user, &cmd, *this, NULL);
		return 0;
	}
	if (name != user->getNickname())
	{
		reply(-1, ERR_USERSDONTMATCH, user, &cmd, *this, NULL);
		return 0;
	}
	if (!mode.empty())
	{
		if (!check_mode(mode))
		{
			reply(-1, ERR_UMODEUNKNOWNFLAG, user, &cmd, *this, NULL);
			return 0;
		}
		else
		{
			if (check_if_mode(user, mode))
			{
				display("MODE " + user->getNickname() + " " + mode, user);
				return 0;
			}
			if (check_if_not_mode(user, mode))
			{
				display("MODE " + user->getNickname() + " " + mode, user);
				return 0;
			}
		}
	}
	return 0;
}

int  Server::invite (Command cmd, User *user) 
{
			std::string name;
			std::string channel;
			User *other = NULL;
			
			if (cmd.getNbParameters() < 2)
			{
				reply(-1, ERR_NEEDMOREPARAMS, user, &cmd, *this, NULL);
				return 0;
			}
			name = cmd.getParameters()[0];
			name.erase(std::remove(name.begin(), name.end(), ':'), name.end());
			channel = cmd.getParameters()[1].erase(0, 1);
			std::map<std::string , User * >::iterator it = _users.find(name);
			std::map<std::string, Channel *>::iterator itt = channels.find(channel);
			if (it != _users.end())
				other = it->second;
			if (itt == channels.end())
			{
				reply(-1, ERR_NOSUCHCHANNEL, user, &cmd, *this, NULL);
				return 0;
			}
			if (it == _users.end())
			{
				reply(-1, ERR_NOSUCHNICK, user, &cmd, *this, NULL);
				return 0;
			}
			if (user->getChannel() != channel)
			{
				reply(-1, ERR_NOTONCHANNEL, user, &cmd, *this, NULL);
				return 0;
			}
			if (other)
			{
				if (other->getChannel() == channel)
				{
					reply(-1, ERR_USERONCHANNEL, user, &cmd, *this, NULL);
					return 0;
				}
				if (other->get_i() == true && user->getIRCOp() == false)
				{
					reply(-1, ERR_CHANOPRIVISNEEDED, user, &cmd, *this, NULL);
					return 0;
				}
				else
				{
					reply(RPL_INVITING, -1, user, &cmd, *this, NULL);
					display(":" + user->getNickname() + " INVITE " + other->getNickname() + " #" + channel, other);
				}
			}
			return 0;
}

int  Server::kill(Command cmd, User *user)
{
			if (cmd.getNbParameters() < 1){
				reply(-1, ERR_NEEDMOREPARAMS, user, &cmd, *this, NULL);
				return 0;
			}
			if (!user->getIRCOp()){
				reply(-1, ERR_NOPRIVILEGES, user, &cmd, *this, NULL);
				return 0;
			}
			std::string user_to_kill_name = cmd.getParameters()[0];
			std::map<std::string, User *>::iterator it_vector_user = _users.find(user_to_kill_name);
			if (it_vector_user == _users.end() || !_users[user_to_kill_name]){
				reply(-1, ERR_NOSUCHNICK, user, &cmd, *this, NULL);
				return 0;
			}
			User *target = this->_users[user_to_kill_name];
			std::map<std::string, Channel *>::iterator it_map_chann;
			it_map_chann = channels.begin();
			while ( it_map_chann != channels.end()){
				std::vector<User *> vector_user = it_map_chann->second->getUser();
				std::vector<User *>::iterator it_vector_users = std::find(vector_user.begin(), vector_user.end(), target);
				if (it_vector_users != vector_user.end())
					vector_user.erase(it_vector_users);
				if (vector_user.size() < 1){
					std::map<std::string, Channel *>::iterator it_tmp = it_map_chann;
					it_map_chann++;
					delete it_tmp->second;
					channels.erase(it_tmp);
				}
				else
					it_map_chann++;
			}
			close(target->getFd());
			_users.erase(user_to_kill_name);
			std::cout << "The user " << user->getNickname() << " has killed the user" << user_to_kill_name << "\r\n";
			if (cmd.getNbParameters() > 1 && cmd.getMsg().size() > 1)
				target->setComment(cmd.getMsg());
			delete target;
			return  0;
}

int	SerServer::ver::executee_cmd(Command cmd, User *user, struct epoll_event event, int rc,Server:: int *nuServer::m_event)
{
	std::string response;
    void  (*ptr_fct[16])(Command cmd, User *user) = {&Server::ping,
													&Server::pong,
													NULL;
													&Server::cap,
													&Server::pass,
													&Server::nick,
													&Server::user,
													NULL
													&Server::part,
													&Server::join,
													&Server::oper,
													&Server::whois,
													&Server::mode,
													&Server::privMsg,
													&Server::notice,
													&Server::kill,
													}
    if (cmd.cmds.find(cmd.getName()) == cmd.cmds.end())
		return 2;
	for (int i = 0; i < 16; i++;)
	{
		if (i == 2 ) i++;
		if (cmd.cmds.find(cmd.getName())->second == 10) {
			return (quit(cmd, user, ));
		}
		if (cmd.cmds.find(cmd.getName())->second == i) {
			return ((*ptr_fct[i])(cmd, user));
		}
	}
	return (0);
}